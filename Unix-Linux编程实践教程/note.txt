Unix-Linux编程实践教程

第   1 章  UNix 系统编程概述


unix系统包含用户程序和系统内核
内核由多个子系统构成
内科管理所有的程序和组员
进程间的通信对个unix程序非常重要
系统变成

bc
more

1.2 什么是系统编程


main()
{
    int c;
    while((c = getchar()) != EOF)
        purchar(c);
}


getchar>>>>>putchar


1.2.2  系统模型

多个用户，程序和设备

终端可以随意地连接到程序

实际上，在计算机内部，这种随意的连接是不允许的
必须采用一种机制进行管理

1.2.3  操作系统的职责


操作系统是一个特殊的程序

操作系统也是程序，与普通程序一样，也运行在内存中
同时它有时一种特殊的程序， 
它能吧普通程序与其他程序或设备连接起来


1.2.4  为程序提供服务


操作系统也被称为内核

程序要访问设备(如键盘，磁盘和打印机)
必须通过内核，所以只有内核才能直接管理设备


程序如果要从键盘得到数据，必须向内核发出请求，若在显示器上
显示结果，也要通过内核，程序中所有对设备的操作都是通过内核
进行的

线是内核提供的虚拟连接线，内核想程序提供服务以便程序
能够访问到设备



编写普通程序时可以任务，程序是直接连接到键盘，显示器，磁盘
等设备的，但在系统编程时，必须对系统的结构和共组欧方式有着
更纳入的里阿杰，要知道内核提供哪些服务(系统调用)
如何使用它们，系统有哪些资源和设备，不同的资源和设备该如何使用


1.3  理解系统编程



内核提供服务以便系统程序可以直接访问系统资源

系统资源
（处理器，输入输出IO,进程管理，内存，设备，计时器，进程间通信，挽留过）


1.3.1 系统资源

1. 处理器(Processor)

程序是由指令构成的，处理器是执行指令的硬件设备，一个系统中
可能有多个后处理器
内核额能够拿牌一个程序何时开始执行，何时暂时停止，恢复
执行，何时终止执行


2. 输入，输出(I/O)

程序中所有输入，输出的数据，终端的输入，输出还有硬盘的
输入输出数据，都必须流经内核，这种集中的处理方式的有点
正确性，数据流不会流错地方
有效性，程序员无需考虑不同设备之间的差异
安全性，数据信息不会被授权的程序非法访问

3. 进程管理(Process Management)

进程指程序的一次运行，每个进程都有自己的资源，如内存，打开的
文件和其他运行时所需的系统资源。
内核中与进程相关服务有新建一个进程，中止进程，进程调度等

4. 内存(Memory)

内存是计算机系统中很重要的资源，程序必须被装载到内存中
才可以运行。内核的职责之一是内存管理，
在需要的时候给程序分配内存，当程序不需要的时候回收内存
内核还能够保存内存不被其他程序非法访问


5. 设备(Device)
6. 计时器(Timer)
7. 进程间通信(Interprocess Communication)

不同的进程也需要通信，内核提供的服务是进程间通信成为
可能。通信也是资源

8. 网络(Networking)

网络之间的通信可以看做是进程间通信的特殊形式，通过
网络，不同主机上的进程，即使使用的是不同操作系统
也可以互相通信
网络通信也是内核提供的服务网

1.3.2  目标：理解系统编程

1.3.3  方法：通过三个问题来理解

1. 分析程序
首先分析现有的程序，了解它的功能及实现眼里


2. 学习系统调用

看程序都用到哪些系统调用，以及每个系统调用的功能和使用方法


3. 编程实现

利用学到的原理和系统调用，自己编程实现来实现程序的工鞥


1.4  从用户的角度来理解unix


1.4.2  登录 ----运行程序--注销

ctrl + D来输小

每个用户都有自己的shell

计算机理由内存，内核运行在内存中，
shell为用户提供服务，shell和用户之间的连接由内核控制


fortune

当用户注销时，内核会结束所有分配给这个用户的进程

内核是如何创建shell进程的？
shell进程是如何得到输入的程序名，
内核又是如何运行程序的 ？

1.4.3 目标操作

用户登录后，可以堆自己的文件今次那个操作

文件中咳哟有e-mail,图片，源程序，可执行程序等的数据

文件被组织在目录中


1. 目录树


在unix系统中，文件和目录被组织成梳妆机构，
unix提供相应的命令来对目录进行操作

2. 目录操作命令

ls  列出目录内
cd
pwd
mkdir 


3. 目录操作命令的工作原理

硬盘上的目录和文件构成了一颗目录树，树的中间节点是目录

每个目录又可以包含很多子目录和文件
可以席间或删除目录，可以从一个路转到其他目录


首先来考察硬盘，硬盘是由很多金属或玻璃的盘片组合起来的e这些盘


这些盘片上可以保存磁性信息，目录在哪里？
用户在自己的主目录中意味着什么？
转到其他目录又以为这神？



1.4.4  文件操作


查看文件额内容   cat more less pg

cp 赋值文件
rm 删除文件
当以文件删掉以后，它所占用的存储空间可能
被立即分配给其他用户肚饿文件

mv  重命名或移动文件
lptr.lp  打印文件

2.文件操作命令的工作原理
3. 文件许可权限
ls -l
user group other

1.5  从系统的角度来看UNIX

1.5.1  用户和程序之间的连接方式

从用户的角度来看unix系统，用户登录系大系统中，运行程序，
再从系统中退出。与此同时，可能有很多用户也在登录，运行程序或退出
他们可以同时对一个文件进行操作，

其实每个独立的空间都是系统的一部分，从宏观的角度来看，
系统还可能由很多的用户，很多的程序，甚至许多计算机系统
互相连接而成，通过例子来看系统是如何工作的，
如何变成使系统中的不同部分做到协调统一


1.5.2  网络桥牌


分布的程序向其他用户发送信息


网络桥牌的例子展示了unix系统变成中的3个重要方面


（1） 通信
某个用户或进程如何与其他用户或进程交换信息？

（2） 协作

在同一个时刻，挽留过桥牌的两个用户不会都去拿同一张牌，
程序如何来协调多个进程使得他们能够没有冲突地访问共享资源？


（3）网络访问

互相独立的计算机通过网络连接在一起，那么计算机中的程序
是如何使用网络的？

1.5.3  bc:unix的计算器

bc是执行一个给予字符的计算器程序


ps可以列出系统中运行的所有进程，

内部进行的操作：先将2入栈，再将3入栈，然后将栈顶的两个数
出栈，计算它们的和，并将结果入栈。p是为了
将栈顶元素打印出来。
dc是基于栈的计算器

bc是dc的预处理器，它将用户输入的表达式转换成逆波兰
表达式，然后通过一个管道(pipe)的通信程序交给dc

与网络桥牌类似，计算器也是由不同的程序互相协作狗过程的
一个完整系统的，每个程序有各自的功能，互相
独立，相互协作
UNIX系统变成在很多场合下，就是要解决好建立
这些独立程序之间的连接和协作方式的问题


1.5.4  从bc/dc  到web

bc是负责用户界面
dc是负责后台运算

在www中，浏览器负责用户界面
在后面负责提供网页的是web服务器
浏览器和web服务器通信




1.6 动手实践


more的3种用法

more filename
command | more
more < filename

who可以列出当前系统中活动的用户

/dev/tty，这是键盘和显示器的设备描述文件
向这个文件写相当于显示在用户的屏幕上，
读相当于从键盘获取用户的输入。
即使程序的输入，输出被"<"或">"重定向，
程序还是可以通过这个文件与终端交换数据

3. 堆输入的进一步处理

用户操作的终端有很多参数，可以调整参数使用
用户输入的字符被立即送到程序，而不是等待回车，
还可以使得输入肚饿字符不回显

1.7  工作步骤与概要图

unix的主要结构，内存被分为系统空间和用户空间，
内核和它的数据结构位于系统空间，用户程序位于用户空间
用户通过终端连接到系统，文件存放在磁盘上，
各种各样的设备被内核直接管理，用户程序可以
通过内核来访问设备，最后还有网络连接，用户可以通过网络接入系统



第2章 用户，文件操作与联机帮助：编写who命令


联机帮助的作用与使用方法
unix的文件操作函数：open,read,write,lseek,close

文件的建立与读写
文件描述符
缓冲：用户级别的缓冲和内核级别的缓冲
内核模式，用户模式与系统调用的代价
unix表示时间的方法与时间格式间的转换
借助utmp文件来列出已登录的用户
系统调用中的错误检测与处理


相关的系统调用
open,read,write,creat,lseek,close
perror

相关命令


man
who
cp
login

2.1  介绍